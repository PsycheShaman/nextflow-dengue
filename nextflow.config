/*
 * -------------------------------------------------
 *  Nextflow config file for Dengue Analysis Pipeline
 * -------------------------------------------------
 * 
 * This configuration file defines pipeline-wide settings such as:
 * - Pipeline metadata
 * - Global parameters
 * - Resource allocation
 * - Container/environment configurations
 * - Execution profiles
 */

// Pipeline Metadata
// This section provides information about the pipeline itself
manifest {
    name            = 'nextflow-dengue'              // Name of the pipeline
    author          = 'TBD'                          // Pipeline author
    homePage        = 'https://github.com/TBD/nextflow-dengue'  // Pipeline homepage
    description     = 'Nextflow Dengue Virus Analysis Pipeline'  // Brief description
    mainScript      = 'main.nf'                      // Entry point script
    nextflowVersion = '!>=23.04.0'                   // Minimum required Nextflow version
    version         = '1.0.0'                        // Pipeline version
}

// Global Default Parameters
// These parameters can be overridden via command line arguments
params {
    // Pipeline Input/Output Options
    input           = null      // Path to input FastQ files (required)
    outdir          = './results'  // Output directory path
    genome          = null      // Reference genome path (required)
    
    // Pipeline Control Options
    help            = false     // Display help message
    version         = false     // Display version information
    
    // Computing Resource Limits
    // These prevent the pipeline from requesting too many resources
    max_memory      = '128.GB'  // Maximum memory for any single process
    max_cpus        = 16        // Maximum CPUs for any single process
    max_time        = '240.h'   // Maximum time for any single process
    
    // Container Settings
    container_version = '1.0'   // Version of container images to use
}

// Load Base Configuration
// This imports process-specific settings from base.config
includeConfig 'conf/base.config'

// Process Shell Settings
// Ensures proper error handling in process execution
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Execution Profiles
// Different configurations for various execution environments
profiles {
    // Docker Profile
    // Uses Docker containers for tool execution
    docker {
        docker.enabled = true                // Enable Docker
        docker.userEmulation = true         // Run as user inside container
        singularity.enabled = false         // Disable Singularity
    }
    
    // Singularity Profile
    // Uses Singularity containers (common in HPC environments)
    singularity {
        singularity.enabled = true          // Enable Singularity
        singularity.autoMounts = true       // Auto-mount host paths
        docker.enabled = false              // Disable Docker
    }
    
    // Conda Profile
    // Uses Conda environments instead of containers
    conda {
        conda.enabled = true                // Enable Conda
        docker.enabled = false              // Disable Docker
        singularity.enabled = false         // Disable Singularity
    }
    
    // Test Profile
    // Used for testing the pipeline with minimal data
    test {
        params.input = "test_data/*_{1,2}.fastq.gz"  // Test dataset
    }
}

// Environment Variables
// Prevent software version conflicts
env {
    PYTHONNOUSERSITE = 1            // Prevent using user's Python packages
    R_PROFILE_USER   = "/.Rprofile" // Prevent using user's R profile
    R_ENVIRON_USER   = "/.Renviron" // Prevent using user's R environment
}

// Executor Settings
// Controls how processes are executed
executor {
    queueSize = 1    // Number of processes that can be queued at once
}

// Reporting Settings
// Configure various execution reports
dag {
    enabled = true   // Generate workflow diagram
    file = "${params.outdir}/pipeline_info/pipeline_dag.html"
}
report {
    enabled = true   // Generate execution report
    file = "${params.outdir}/pipeline_info/execution_report.html"
}
timeline {
    enabled = true   // Generate timeline report
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
trace {
    enabled = true   // Generate detailed trace
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}

// Resource Management Function
// Ensures resource requests don't exceed maximum limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            // Compare requested memory with maximum allowed
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            // Compare requested time with maximum allowed
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            // Compare requested CPUs with maximum allowed
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
} 